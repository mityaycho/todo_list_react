{"version":3,"sources":["Button.tsx","TodoListTask.tsx","TodoListTasks.js","TodoListFilter.js","TodoListTitle.tsx","AddNewItemForm.js","api.js","reducer.js","TodoList.js","App.tsx","serviceWorker.js","store.ts","index.tsx"],"names":["Button","props","className","onClick","title","TodoListTask","state","editMode","task","onIsDoneChanged","e","status","currentTarget","checked","changeStatus","id","onTitleChanged","setState","value","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","render","containerCssClass","priorityTitle","priority","type","onChange","onBlur","autoFocus","onDoubleClick","React","Component","TodoListTasks","tasksElements","tasks","map","key","TodoListFilter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","updateTitle","onDelete","AddNewItemForm","error","onAddItemClick","newText","addItem","onKeyPress","classNameForInput","placeholder","instance","axios","create","baseURL","withCredentials","headers","api","newTaskTitle","todolistId","post","get","put","delete","ADD_TODOLIST","DELETE_TODOLIST","DELETE_TASK","ADD_TASK","SET_TASKS","UPDATE_TASK","SET_TODOLISTS","initialState","updateTaskTC","taskId","obj","dispatch","getState","todolists","find","tl","t","then","res","updateTaskAC","deleteTodolistTC","deleteTodolistAC","deleteTaskTC","deleteTaskAC","addTaskTC","newTask","data","item","addTaskAC","setTasksTC","allTasks","items","setTasksAC","addTodolistTC","todolist","newTodolist","loadTodolistsTC","reducer","action","filter","TodoList","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","setTasks","addTask","newFilterValue","changeTask","updateTask","deleteTodolist","updateTodolistTitle","newTasksTitileRef","createRef","this","ConnectedTodolist","connect","updateTodolistTitleAC","updateTodolistTitleTC","App","addTodoList","addTodolist","loadTodolists","ConnectedApp","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c1b2f52.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface IButton {\r\n\tclassName: string;\r\n\tonClick: () => void;\r\n\ttitle: string\r\n}\r\n\r\nexport const Button = (props: IButton) => <button className={props.className}\r\n\tonClick={props.onClick}>{props.title}</button>;","import React from 'react';\nimport './App.css';\n\nimport { Button } from './Button';\n\ninterface IProps {\n  task: any;\n  title: string;\n  changeStatus: any;\n  changeTitle: any;\n  deleteTask: any;\n};\n\nclass TodoListTask extends React.Component<IProps> {\n\n  state = {\n    editMode: false,\n    title: this.props.task.title\n  };\n\n  onIsDoneChanged = (e: any) => {\n    let status = e.currentTarget.checked ? 2 : 0;\n    this.props.changeStatus(this.props.task.id, status);\n  };\n\n  onTitleChanged = (e: any) => {\n    this.setState({title: e.currentTarget.value});\n  };\n\n  activateEditMode = () => {\n    this.setState({editMode: true});\n  };\n\n  deactivateEditMode = () => {\n    this.props.changeTitle(this.props.task.id, this.state.title);\n    this.setState({editMode: false});\n  };\n\n  onDeleteTask = () => {\n    this.props.deleteTask(this.props.task.id);\n  };\n\n  render = () => {\n    let containerCssClass = this.props.task.status === 2 ? \"done\" : \"undone\";\n    let priorityTitle = \"\";\n    switch (this.props.task.priority) {\n      case 0:\n        priorityTitle = \"Low\";\n        break;\n      case 1:\n        priorityTitle = \"Middle\";\n        break;\n      case 2:\n        priorityTitle = \"High\";\n        break;\n      case 3:\n        priorityTitle = \"Urgently\";\n        break;\n      case 4:\n        priorityTitle = \"Later\";\n        break;\n      default:\n        priorityTitle = \"Low\";\n    };\n\n    return (\n      <section className={containerCssClass}>\n        <div className=\"task-title\">\n          <h2>{containerCssClass}</h2><Button className=\"universe-button\"\n                                              title=\"delete\"\n                                              onClick={this.onDeleteTask}/>\n        </div>\n        <label className=\"task-container\">\n          <span>\n           <input className=\"task-checkbox\"\n                  type=\"checkbox\"\n                  checked={this.props.task.status}\n                  onChange={this.onIsDoneChanged}/>\n            {this.state.editMode\n              ? <input onBlur={this.deactivateEditMode}\n                       onChange={this.onTitleChanged}\n                       autoFocus={true}\n                       value={this.state.title}/>\n              : <span className=\"task\" onDoubleClick={this.activateEditMode}>{this.props.task.title}</span>\n            }\n          </span>\n          priority: {priorityTitle}\n        </label>\n      </section>\n    );\n  };\n};\n\nexport default TodoListTask;","import React from 'react';\nimport './App.css';\nimport TodoListTask from './TodoListTask';\n\nclass TodoListTasks extends React.Component {\n  render = () => {\n\n    let tasksElements = this.props.tasks.map(\n      task => <TodoListTask key={task.id}\n                            task={task}\n                            changeStatus={this.props.changeStatus}\n                            changeTitle={this.props.changeTitle}\n                            deleteTask={this.props.deleteTask}\n      />);\n\n    return (\n      <div className=\"todoList-tasks\">\n        {tasksElements}\n      </div>\n    );\n  };\n};\n\nexport default TodoListTasks;","import React from 'react';\nimport '../src/App.css';\n\nimport { Button } from './Button';\n\nclass TodoListFilter extends React.Component {\n\n  state = {\n    isHidden: false\n  };\n\n  onAllFilterClick = () => this.props.changeFilter(\"All\");\n\n  onCompletedFilterClick = () => this.props.changeFilter(\"Completed\");\n\n  onActiveFilterClick = () => this.props.changeFilter(\"Active\");\n\n  onShowFiltersClick = () => this.setState({isHidden: true});\n\n  onHideFiltersClick = () => this.setState({isHidden: false});\n\n  render = () => {\n\n    let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"universe-button\";\n    let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"universe-button\";\n    let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"universe-button\";\n\n    return (\n      <div className=\"filter-container\">\n        <div className=\"todoList-filter\">\n          {!this.state.isHidden &&\n          <div className=\"buttons-filter\">\n            <Button className={classForAll} title=\"All\" onClick={this.onAllFilterClick}/>\n            <Button className={classForCompleted} title=\"Completed\" onClick={this.onCompletedFilterClick}/>\n            <Button className={classForActive} title=\"Active\" onClick={this.onActiveFilterClick}/>\n          </div>\n          }\n          {!this.state.isHidden && <span className=\"universe-button show-btn\" onClick={this.onShowFiltersClick}>hide</span>}\n          {this.state.isHidden && <span className=\"universe-button show-btn\" onClick={this.onHideFiltersClick}>show</span>}\n        </div>\n      </div>\n    );\n  };\n};\n\nexport default TodoListFilter;","import React from 'react';\nimport './App.css';\n\nimport { Button } from './Button';\n\ninterface ITodoListTitle {\n  editMode: boolean;\n  title: string;\n  updateTitle: any;\n  onDelete: any;\n\n};\n\nclass TodoListTitle extends React.Component<ITodoListTitle> {\n  state = {\n    editMode: false,\n    title: this.props.title\n  };\n\n  onTitleChanged = (e: any) => {\n    this.setState({title: e.currentTarget.value});\n  };\n\n  deactivateEditMode = () => {\n    this.setState({editMode: false});\n    this.props.updateTitle(this.state.title);\n  };\n\n  activateEditMode = () => {\n    this.setState({editMode: true});\n  };\n\n  render = () => {\n    return (\n      <>\n        {\n          this.state.editMode\n            ? <input value={this.state.title}\n                     autoFocus={true}\n                     onBlur={this.deactivateEditMode}\n                     onChange={this.onTitleChanged}/>\n            : <h1 className=\"todoList-header__title\" onClick={this.activateEditMode}>{this.props.title}\n              <Button className=\"universe-button\" title=\"delete\" onClick={this.props.onDelete}/>\n            </h1>\n        }\n      </>\n    );\n  };\n};\n\nexport default TodoListTitle;","import React from 'react';\nimport './App.css';\n\nimport { Button } from \"./Button\";\n\nclass AddNewItemForm extends React.Component {\n  state = {\n    error: false,\n    title: \"\"\n  };\n\n  onAddItemClick = () => {\n    let newText = this.state.title;\n    this.setState({title: \"\"});\n\n    if (newText === \"\") {\n      this.setState({error: true});\n    } else {\n      this.setState({error: false});\n      // передаём новый текст наружу\n      this.props.addItem(newText);\n    }\n  };\n\n  onTitleChanged = (e) => {\n    this.setState({\n      error: false,\n      title: e.currentTarget.value\n    });\n  };\n\n  onKeyPress = (e) => {\n    if (e.key === \"Enter\") {\n      this.onAddItemClick();\n    }\n  };\n\n\n  render = () => {\n    let classNameForInput = this.state.error ? \"error\" : \"input\";\n\n    return (\n      <div className=\"todoList-newTaskForm\">\n        <input className={classNameForInput} type=\"text\"\n               placeholder={this.props.placeholder}\n               onChange={this.onTitleChanged}\n               onKeyPress={this.onKeyPress}\n               value={this.state.title}\n        />\n        <Button className=\"universe-button\" title=\"add\" onClick={this.onAddItemClick} />\n      </div>\n    );\n  };\n};\n\nexport default AddNewItemForm;\n\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: \"https://social-network.samuraijs.com/api/1.0/todo-lists\",\r\n\twithCredentials: true, // передаваём с запросом куки для запрашиваемого домена\r\n\theaders: {\r\n\t\t\"API-KEY\": \"5ac078f7-4935-4223-bad6-63f58b80cd23\"\r\n\t} // специальный ключ в заголовках передаём\r\n});\r\n\r\nexport const api = {\r\n\tcreateTask(newTaskTitle, todolistId) {\r\n\t\treturn instance.post(`/${todolistId}/tasks`, {\r\n\t\t\ttitle: newTaskTitle\r\n\t\t});\r\n\t},\r\n\tcreateTodolist(title) {\r\n\t\treturn instance.post(\"\", {\r\n\t\t\ttitle: title\r\n\t\t});\r\n\t},\r\n\tgetTodolists() {\r\n\t\treturn instance.get(\"\");\r\n\t},\r\n\tupdateTask(task) {\r\n\t\treturn instance.put(`/tasks`, task);\r\n\t},\r\n\tdeleteTodolist(id) {\r\n\t\treturn instance.delete(\"/\" + id);\r\n\t},\r\n\tdeleteTask(id) {\r\n\t\treturn instance.delete(`/tasks/${id}`);\r\n\t},\r\n\tgetTasks(todolistId) {\r\n\t\treturn instance.get(`/${todolistId}/tasks`);\r\n\t},\r\n\tupdateTodolistTitle(title, todolistId) {\r\n\t\treturn instance.put(`/${todolistId}`, {\r\n\t\t\ttitle: title\r\n\t\t});\r\n\t}\r\n};","import { api } from './api';\r\n\r\nexport const ADD_TODOLIST = 'TodoList/Reducer/ADD-TODOLIST';\r\nexport const DELETE_TODOLIST = 'TodoList/Reducer/DELETE-TODOLIST';\r\nexport const DELETE_TASK = 'TodoList/Reducer/DELETE-TASK';\r\nexport const UPDATE_TODOLIST_TITLE = 'TodoList/Reducer/UPDATE_TODOLIST_TITLE';\r\nexport const ADD_TASK = 'TodoList/Reducer/ADD-TASK';\r\nexport const SET_TASKS = 'TodoList/Reducer/SET_TASKS';\r\nexport const UPDATE_TASK = 'TodoList/Reducer/UPDATE-TASK';\r\nexport const SET_TODOLISTS = 'TodoList/Reducer/SET_TODOLISTS';\r\n\r\n\r\n\r\nconst initialState = {\r\n  \"todolists\": [\r\n    // {\r\n    //     \"id\": 0, \"title\": \"every day\",\r\n    //     tasks: [\r\n    //         {\"title\": \"css\", \"isDone\": false, \"priority\": \"low\", \"id\": 0},\r\n    //         {\"title\": \"js\", \"isDone\": false, \"priority\": \"low\", \"id\": 1},\r\n    //         {\"title\": \"react\", \"isDone\": false, \"priority\": \"low\", \"id\": 2},\r\n    //         {\"title\": \"sasasa\", \"isDone\": false, \"priority\": \"low\", \"id\": 3},\r\n    //         {\"title\": \"yoaa\", \"isDone\": false, \"priority\": \"low\", \"id\": 4},\r\n    //         {\"title\": \"sddsdsds\", \"isDone\": false, \"priority\": \"low\", \"id\": 5}]\r\n    // },\r\n    // {\"id\": 1, \"title\": \"tomorrow\", tasks: []},\r\n    // {\"id\": 2, \"title\": \"weewwe`\", tasks: []},\r\n    // {\"id\": 3, \"title\": \"dddd\", tasks: []}\r\n  ]\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n\r\n    case SET_TASKS:\r\n      return {\r\n        ...state,\r\n        todolists: state.todolists.map(tl => {\r\n          if (tl.id !== action.todolistId) {\r\n            return tl;\r\n          } else {\r\n            return {...tl, tasks: action.tasks};\r\n          }\r\n        })\r\n\t\t\t};\r\n\t\t\t\r\n    case SET_TODOLISTS:\r\n      return {\r\n        ...state,\r\n        todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n\t\t\t};\r\n\t\t\t\r\n    case ADD_TODOLIST:\r\n      return {\r\n        ...state,\r\n        todolists: [...state.todolists, action.newTodolist]\r\n\t\t\t};\r\n\t\t\t\r\n    case DELETE_TODOLIST:\r\n      return {\r\n        ...state,\r\n        todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\r\n\t\t\t};\r\n\t\t\t\r\n    case UPDATE_TODOLIST_TITLE:\r\n      return {\r\n        ...state,\r\n        todolists: state.todolists.map(tl => {\r\n          if (tl.id !== action.todolistId) return tl;\r\n          else return {...tl, title: action.title}\r\n        })\r\n\t\t\t};\r\n\t\t\t\r\n    case DELETE_TASK:\r\n      return {\r\n        ...state,\r\n        todolists: state.todolists.map(tl => {\r\n          if (tl.id === action.todolistId) {\r\n            return {\r\n              ...tl,\r\n              tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n            };\r\n          } else {\r\n            return tl;\r\n          }\r\n        })\r\n\t\t\t};\r\n\t\t\t\r\n    case ADD_TASK:\r\n      return {\r\n        ...state,\r\n        todolists: state.todolists.map(tl => {\r\n          if (tl.id === action.todolistId) {\r\n            return {...tl, tasks: [...tl.tasks, action.newTask]};\r\n          } else {\r\n            return tl;\r\n          }\r\n        })\r\n\t\t\t};\r\n\t\t\t\r\n    case UPDATE_TASK:\r\n      return {\r\n        ...state,\r\n        todolists: state.todolists.map(tl => {\r\n          if (tl.id === action.todolistId) {\r\n            return {\r\n              ...tl,\r\n              tasks: tl.tasks.map(t => {\r\n                if (t.id !== action.taskId) {\r\n                  return t;\r\n                } else {\r\n                  return {...t, ...action.obj};\r\n                }\r\n              })\r\n            };\r\n          } else {\r\n            return tl;\r\n          }\r\n        })\r\n\t\t\t};\r\n\t\t\t\r\n    default:\r\n      return state;\r\n  };\r\n};\r\n\r\nconst updateTaskAC = (taskId, obj, todolistId) => ({type: UPDATE_TASK, taskId, obj, todolistId});\r\nexport const updateTaskTC = (taskId, obj, todolistId) => (dispatch, getState) => {\r\n  let todolist = getState().todolists.find(tl => tl.id === todolistId);\r\n  let tasks = todolist.tasks;\r\n  let task = tasks.find(t => t.id === taskId);\r\n  api.updateTask({...task, ...obj})\r\n    .then(res => {\r\n      dispatch(updateTaskAC(taskId, obj, todolistId))\r\n    });\r\n};\r\n\r\nconst deleteTodolistAC = (todolistId) => ({type: DELETE_TODOLIST, todolistId: todolistId});\r\nexport const deleteTodolistTC = (todolistId) => (dispatch) => {\r\n  api.deleteTodolist(todolistId)\r\n    .then(res => {\r\n      dispatch(deleteTodolistAC(todolistId));\r\n    });\r\n};\r\n\r\nconst deleteTaskAC = (taskId, todolistId) => ({type: DELETE_TASK, taskId, todolistId});\r\nexport const deleteTaskTC = (taskId, todolistId) => (dispatch) => {\r\n  api.deleteTask(taskId)\r\n    .then(res => {\r\n      dispatch(deleteTaskAC(taskId, todolistId));\r\n    });\r\n};\r\n\r\nconst updateTodolistTitleAC = (title, todolistId) => ({type: UPDATE_TODOLIST_TITLE, title, todolistId});\r\nexport const updateTodolistTitleTC = (title, todolistId) => (dispatch) => {\r\n  api.updateTodolistTitle(title, todolistId)\r\n    .then(res => {\r\n      dispatch(updateTodolistTitleAC(title, todolistId));\r\n    });\r\n};\r\n\r\n\r\nconst addTaskAC = (newTask, todolistId) => ({type: ADD_TASK, newTask, todolistId});\r\nexport const addTaskTC = (newText, todolistId) => (dispatch) => {\r\n  api.createTask(newText, todolistId)\r\n    .then(res => {\r\n      let newTask = res.data.data.item;\r\n      dispatch(addTaskAC(newTask, todolistId));\r\n    });\r\n};\r\n\r\nconst setTasksAC = (tasks, todolistId) => ({type: SET_TASKS, tasks, todolistId});\r\nexport const setTasksTC = (todolistId) => (dispatch) => {\r\n  api.getTasks(todolistId)\r\n    .then(res => {\r\n      let allTasks = res.data.items;\r\n      dispatch(setTasksAC(allTasks, todolistId));\r\n    });\r\n};\r\n\r\nconst addTodolistAC = (newTodolist) => ({type: ADD_TODOLIST, newTodolist: newTodolist});\r\nexport const addTodolistTC = (title) => (dispatch) => {\r\n  api.createTodolist(title)\r\n    .then(res => {\r\n      let todolist = res.data.data.item;\r\n      dispatch(addTodolistAC(todolist));\r\n    });\r\n};\r\n\r\nexport const setTodolistsAC = (todolists) => ({type: SET_TODOLISTS, todolists: todolists});\r\nexport const loadTodolistsTC = () => (dispatch) => {\r\n  api.getTodolists()\r\n    .then(res => {\r\n      dispatch(setTodolistsAC(res.data))\r\n    });\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport './App.css';\nimport TodoListTasks from './TodoListTasks';\nimport TodoListFilter from './TodoListFilter';\nimport TodoListTitle from './TodoListTitle';\nimport AddNewItemForm from './AddNewItemForm';\n\nimport { connect } from 'react-redux';\nimport {\n  addTaskTC,\n  deleteTaskTC,\n  deleteTodolistTC,\n  setTasksTC,\n  updateTaskTC,\n  updateTodolistTitleTC\n} from \"./reducer\";\n\n\nclass TodoList extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.newTasksTitileRef = React.createRef();\n  };\n\n  state = {\n    filterValue: \"All\"\n  };\n\n  componentDidMount() {\n    this.restoreState();\n  };\n\n  saveState = () => {\n    // переводим объект в строку\n    let stateAsString = JSON.stringify(this.state);\n    // сохраняем нашу строку в localStorage под ключом \"our-state\"\n    localStorage.setItem(\"our-state-\" + this.props.id, stateAsString);\n  };\n\n  restoreState = () => {\n    this.props.setTasks(this.props.id);\n  };\n\n  addTask = (newText) => {\n    this.props.addTask(newText, this.props.id);\n  };\n\n  changeFilter = (newFilterValue) => {\n    this.setState({\n      filterValue: newFilterValue\n    }, () => {\n      this.saveState();\n    });\n  };\n\n  changeTask = (taskId, obj) => {\n    this.props.updateTask(taskId, obj, this.props.id);\n  };\n\n  changeStatus = (taskId, status) => {\n    this.changeTask(taskId, {status: status});\n  };\n\n  changeTitle = (taskId, title) => {\n    this.changeTask(taskId, {title: title});\n  };\n\n  deleteTodolist = () => {\n    this.props.deleteTodolist(this.props.id);\n  };\n\n  deleteTask = (taskId) => {\n    this.props.deleteTask(taskId, this.props.id);\n  };\n\n  updateTitle = (title) => {\n    this.props.updateTodolistTitle(title, this.props.id);\n  };\n\n  render = () => {\n    let {tasks = []} = this.props;\n    return (\n      <div className=\"todoListTitle\">\n        <main className=\"todo-list\">\n          <TodoListTitle title={this.props.title} onDelete={this.deleteTodolist} updateTitle={this.updateTitle}/>\n          <AddNewItemForm addItem={this.addTask} placeholder=\"New task\" />\n        </main>\n        <section className=\"section-tasks\">\n          <TodoListFilter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\n          <TodoListTasks changeStatus={this.changeStatus}\n                         changeTitle={this.changeTitle}\n                         deleteTask={this.deleteTask}\n            /*tasks={this.props.tasks.filter(t => {*/\n                         tasks={tasks.filter(t => {\n                           if (this.state.filterValue === \"All\") {\n                             return true;\n                           }\n                           if (this.state.filterValue === \"Active\") {\n                             return t.status === 0;\n                           }\n                           if (this.state.filterValue === \"Completed\") {\n                             return t.status === 2;\n                           }\n                         })}/>\n        </section>\n      </div>\n    );\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addTask(newText, todolistId) {\n      dispatch(addTaskTC(newText, todolistId));\n    },\n    setTasks(todolistId) {\n      dispatch(setTasksTC(todolistId));\n    },\n    updateTask(taskId, obj, todolistId) {\n      const action = updateTaskTC(taskId, obj, todolistId);\n      dispatch(action);\n    },\n    deleteTodolist: (todolistId) => {\n      const action = deleteTodolistTC(todolistId);\n      dispatch(action)\n    },\n    deleteTask: (taskId, todolistId) => {\n      const action = deleteTaskTC(taskId, todolistId);\n      dispatch(action)\n    },\n    updateTodolistTitle: (title, todolistId) => {\n      const action = updateTodolistTitleTC(title, todolistId);\n      dispatch(action)\n    }\n  };\n};\n\nconst ConnectedTodolist = connect(null, mapDispatchToProps)(TodoList);\n\nexport default ConnectedTodolist;","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\nimport AddNewItemForm from './AddNewItemForm';\n\nimport { connect } from 'react-redux';\nimport { addTodolistTC, loadTodolistsTC } from './reducer';\n\n\ninterface IProps {\n  addTodolist: any;\n  loadTodolists: any;\n  todolists: any[];\n}\n\ninterface IAddTodoList {\n  addTodolist: (title: string) => void;\n}\n\nclass App extends React.Component<IProps, IAddTodoList> {\n\n  addTodoList = (title: string) => {\n    this.props.addTodolist(title);\n  };\n\n  componentDidMount() {\n    this.restoreState();\n  };\n\n  restoreState = () => {\n    this.props.loadTodolists();\n  };\n\n  render = () => {\n    const todolists = this.props.todolists\n      .map(tl => <TodoList key={tl.id} id={tl.id} title={tl.title} tasks={tl.tasks}/>);\n\n    return (\n      <div className=\"App\">\n        <div className=\"todoList\">\n          <AddNewItemForm addItem={this.addTodoList} placeholder=\"New title task\"/>\n        </div>\n        <div className=\"todo-list-task\">\n          {todolists}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    todolists: state.todolists\n  }\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    loadTodolists: () => {\n      dispatch(loadTodolistsTC())\n    },\n    addTodolist: (title: string) => {\n      const action = addTodolistTC(title);\n      dispatch(action);\n    }\n  }\n};\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport default ConnectedApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import reducer from './reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport { applyMiddleware, createStore } from 'redux';\r\n\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}